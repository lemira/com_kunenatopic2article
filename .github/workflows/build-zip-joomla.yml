name: Build Joomla Package
on:
  workflow_dispatch:
    inputs:
      auto_download:
        description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏'
        required: false
        default: 'true'
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set timestamp variable (–ë–µ—Ä–ª–∏–Ω—Å–∫–æ–µ –≤—Ä–µ–º—è)
        run: |
          TIMESTAMP=$(TZ="Europe/Berlin" date +"%y%m%d-%H%M")
          echo "–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π TIMESTAMP: $TIMESTAMP"
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
          
      - name: Create ZIP archive with timestamp
        run: |
          zip -r Joomla-Component-${{ env.TIMESTAMP }}.zip * -x ".git*" ".github*"
          
      - name: Upload ZIP as artifact
        uses: actions/upload-artifact@v4
        with:
          name: Joomla-Component-${{ env.TIMESTAMP }}
          path: Joomla-Component-${{ env.TIMESTAMP }}.zip
          retention-days: 30
          
      # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä–µ–ª–∏–∑–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      - name: Create temporary release for download
        if: inputs.auto_download == true || inputs.auto_download == ''
        uses: softprops/action-gh-release@v1
        with:
          tag_name: temp-build-${{ env.TIMESTAMP }}
          name: "üîß Temp Build ${{ env.TIMESTAMP }}"
          body: |
            **–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è**
            
            –≠—Ç–æ—Ç —Ä–µ–ª–∏–∑ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.
            
            ‚è∞ –í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏: ${{ env.TIMESTAMP }}
            üîó –ö–æ–º–º–∏—Ç: ${{ github.sha }}
            
            üì• **–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –º–æ–∂–Ω–æ –ø—Ä—è–º–æ –æ—Ç—Å—é–¥–∞ ‚Üì**
          files: Joomla-Component-${{ env.TIMESTAMP }}.zip
          prerelease: true
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      - name: Generate download link
        if: success()
        run: |
          echo "## üì• –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üîó **[–°–∫–∞—á–∞—Ç—å Joomla-Component-${{ env.TIMESTAMP }}.zip](${{ github.server_url }}/${{ github.repository }}/releases/download/temp-build-${{ env.TIMESTAMP }}/Joomla-Component-${{ env.TIMESTAMP }}.zip)**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "–ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ [Releases](${{ github.server_url }}/${{ github.repository }}/releases) –∏ –Ω–∞–π–¥–∏—Ç–µ —Ä–µ–ª–∏–∑ **Temp Build ${{ env.TIMESTAMP }}**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ö° –§–∞–π–ª —Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ [Artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
        
  # Job –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–µ–ª–∏–∑–æ–≤
  cleanup:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Cleanup old temporary releases
        uses: actions/github-script@v6
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const now = new Date();
            const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);
            
            for (const release of releases) {
              if (release.tag_name.startsWith('temp-build-') && 
                  new Date(release.created_at) < oneDayAgo) {
                console.log(`–£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–µ–ª–∏–∑: ${release.tag_name}`);
                
                // –£–¥–∞–ª—è–µ–º —Ä–µ–ª–∏–∑
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id,
                });
                
                // –£–¥–∞–ª—è–µ–º —Ç–µ–≥
                try {
                  await github.rest.git.deleteRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `tags/${release.tag_name}`,
                  });
                } catch (error) {
                  console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥ ${release.tag_name}: ${error.message}`);
                }
              }
            }
